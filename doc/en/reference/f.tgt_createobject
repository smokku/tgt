TGT Reference Manual: Functions

NAME

tgt_createobject, tgt_createandlink - create an object and eventually make
                                      it a children of another.

SYNOPSIS

struct tgt_object * tgt_createobject(struct tgt_terminal *term,int type,long *taglist);
struct tgt_object * tgt_createandlink(struct tgt_object *obj,struct tgt_terminal *term,int type,long *taglist);

DESCRIPTION

tgt_createobject creates an object (eg.window, button, checkbox, list, own
application objects) which type (for instance TGT_OBJECT_WINDOW, TGT_OBJECT_
_BUTTON) is given as 'type' argument. The is assigned also a terminal which
description (which can be obtained from tgt_start() or tgt_setterminal()) is
passed as 'term'. The object parameters are specified in 'taglist' which
is an array of longs containing parameters codes (only some are compulsory,
the rest is optional) and parameter values (see the example). For exact
description of parameter codes see c.* documentation files.

tgt_createandlink is equivalent to:

nobj=tgt_createobject(...);
tgt_link(nobj,obj);

,which practically means that it behaves just like tgt_createobject() but
the object is also assigned a parent 'obj' (which must also be an object). 
Many operations (such as refresh, keyboard handling etc) when performed
on parent will be performed on the child as well. Many objects, such
as window,desktop (the root object) also perform children switching when
keys like arrow left/arrow down (or other specified by parent's parameters)
are pressed. 

Both functions return NULL if the object cannot be created (lack of parameters
etc)

EXAMPLE
(A simple TGT application, WARNING: untested :)

void destroy();
struct tgt_object *desktop;

main()
{
struct tgt_terminal *term;
struct tgt_object *window;

desktop=tgt_start(NULL,&term);
window=tgt_createandlink(desktop,term,TGT_CLASS_WINDOW,
    (long[]) { TGTT_X, 20,
               TGTT_Y, 5,
	       TGTT_XS, 40,
	       TGTT_YS, 15,
	       TGTT_WINDOW_TITLE, "Test Window",
	       TGTT_END, 0});

tgt_createandlink(desktop,term,TGT_CLASS_BUTTON, (long[]) { TGTT_X,2,TGTT_Y,5,
		TGTT_BUTTON_CAPTION,"Press me!",TGTT_CALLBACK,(long) destroy,TGTT_END, 0});

tgt_refresh(desktop);
tgt_waitkeys(desktop);
}
void destroy(void)
{
    tgt_destroyobject(desktop);
    _exit(0);
}
