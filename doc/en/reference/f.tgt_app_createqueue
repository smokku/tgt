TGT Reference Manual: Queue Functions

NAME

tgt_app_createqueue 
tgt_app_queue
tgt_app_waitmsg
tgt_app_checkmsg    -queue functions

SYNOPSIS

struct tgt_queue * tgt_app_createqueue(void);
void tgt_app_queue(struct tgt_queue *q,int code,long data1,void *data2);
int tgt_app_waitmsg(struct tgt_queue *q,struct tgt_queue_msg *m);
int tgt_app_checkmsg(struct tgt_queue *q,struct tgt_queue_msg *m,int s,int us);

DESCRIPTION

Queues could be used in tgt applications to communicate between callbacks 
that are called by asynchronously running keyboard thread (see tgt_async_waitkeys)
and the application.

tgt_app_createqueue creates a queue and saves allocated data in a tgt_queue
structure

tgt_app_queue sends a message to queue q with 'code','data1','data2' parameters,
which meaning depends only on the application. Those fields will be available in
'code', 'data' and 'pointer' fields in tgt_queue_msg in queue receiving functions.

tgt_app_waitmsg waits for a message to appear in queue q and places received
message data (code,data,pointer) in a tgt_queue_msg structure pointed by m.
This function always returns 1.

tgt_app_checkmsg works just like tgt_app_waitmsg , but if no messages are
available in queue for s seconds and us micros, the function returns 
with zero. If everything goes ok, 1 is returned.

EXAMPLE

(application)

struct tgt_queue * g_queue;
(...)
struct tgt_queue_msg msg;
g_queue=tgt_app_createqueue();
tgt_async_waitkeys(desktop);
for(;;)
{
    if(tgt_app_checkmsg(g_queue,&msg,5,0))
    {
	if(msg.code=2) break;
    }
    else
	fprintf(stderr,"!! Warning !! no messages in 5 seconds\n");
}

(quit button callback)
(...)
tgt_app_queue(g_queue,2,0,NULL);
(...)
