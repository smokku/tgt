POMYSLY NA KLASY I SUGESTIE DOTYCZACE ICH

- LABEL, BUTTON, DESKTOP, WINDOW juz sa...
  Maly pomysl co do desktop i window: mozliwosc podania wlasnego callbacka
  wywolywanego przy TGT_OBJECT_KEYHANDLE (skroty klawiszowe programu,
  typu np. f1 pomoc, 'm' otwiera pulldownmenu etc...), callback
  standartowo zwraca 1 jesli rozumie, 0 jesli nie...
  Co do window: moze przydalby sie jeszcze tag TTGT_WINDOW_BORDERLESS (T/F)...
  do LABEL,STRING dorobic mozliwosc rownania do prawej/lewej


-    Nazwa: ________

  STRING (pole dialogowe): - sam przydziela pamiec, zgodnie z 
  zadana maksymalna iloscia znakow jaka mozna wpisac (wpisany
  ciag odczytywany via gettag(), - maks ilosc znakow mozna zmieniac
  (realizacja: realloc()), - mozliwosc zadeklarowania zestawu
  znakow akceptowanych przez string ,np TTGT_STRING_ACCEPT,"0123456789-",
  (realizacja: index()), - TTGT_STRING_PASSWORD, (true/false), =>
  jesli true to zamiast literek sa '*'

-     [*] Nazwa   albo    [ ] Nazwa

  CHECKBOX: - dosc prosta sprawa, chyba nie wymaga komentarzy, - mozliwosc
  ustawienia tagu TTGT_CHECKBOX_CHECKED (tak aby mozna bylo robic exclusive
  checkboxy), - mozliwosc dodania wlasnego callback-objectf (wywolywanego
  przy zmianie stanu) (cel ten sam)

-    [Nazwa ][v] albo jakos tak podobnie

  CYCLE-LIST (po uaktywnieniu i 'kliknieciu' pojawia sie menu z ktorego
  mozna wybrac pozycje): - tag listy pozycji podawanej jako char **,
  tag TTGT_CYCLELIST_SELECTED do odczytywania/ustawiania aktualnej pozycji
  niezaleznie od tego czy menu jest rozwiniete czy nie, - ewentualny wlasny
  callback objectf (przy zmianie pozycji), - kiedy menu jest otwarte dla
  TGT_OBJECT_HANDLE zwracane jest zawsze jeden , tak aby nie mozna bylo nic
  przelaczac kopac etc, -mozliwosc podania tagu TTGT_CYCLELIST_REFRESH ,
  obiektu ktory ma byc odswiezany po zamknieciu menu (ktore np. moze w koncu zajac caly
  ekran i w efekcie pokaszanic nam wszystko 'pod spodem'),
  w 90% obiekt desktop
  
-    (brak, pozycja opisuje jedynie to co sie ma pojawiac)

  CONTEXT-MENU: - niezaznaczalny i nierenderowalny..., - pojawia sie
  (aktywujac sam siebie-w koncu nikt nie zabrania aktywacji obiektu
  via tgt_activate() ktory nawet ma TGT_OBJFLAGS_NONSELECTABLE)
  po ustawieniu np. tagu TTGT_CONTEXTMENU_OPEN na 1 (moze to zrobic
  np callback klas window czy button po nacisnieciu odpowiedniego
  hotkey-a, patrz wyzej (najwyzej) , - bedac juz aktywnym
  zwraca jeden przy kazdym TGT_OBJECT_HANDLE, tak aby nie mozna bylo
  go zdeaktywowac/zmienic okna ,etc, - zamyka sie dopiero przy
  kliknieciu na jakies pozycji lub nacisnieciu klawisza anulowania
  (np. delete) no i wtedy deaktywuje sie, aktywujac jakis inny obiekt,
  i robiac refresh obiektu podanego jako TTGT_CONTEXTMENU_REFRESH (w 90
  % klasa desktop) , tak jak w cycle-list
  - lista pozycji (podawana przy TTGT_CONTEXTMENU_ITEMS) to lista dwukierunkowa
  niecyrkulacyjna, w ktorej kazdy wezel zlozony jest z typu, pointera i danej
  (typ: pozycja (wtedy pointer=wskaznik na nazwe, dana=identyfikator lub 
  podmenu (wtedy pointer=wskaznik na nowa liste)), - obowiazek
  podania callbacka wywolywanego z identyfikatorem pozycji jako argument
  przy kliknieciu na pozycje, - in fjuczer mozliwosc stworzenia struktur menu
  automatycznie: nie podajac TTGT_CONTEXTMENU_ITEMS mozna podac
  TTGT_CONTEXTMENU_LIST , ktora jest pointerem na long ( czy tam
  na struct { int type,char *descr,int id} ), tablica w stylu
  { TGT_MENU_ITEM, "Pozycja", 1,
    TGT_MENU_ITEM, "Pozycja z ID 2", 2,
    TGT_MENU_SUBMENU, "Submenu" , 0,
	TGT_MENU_ITEM, "Pozycja w submenu #1", 3,
	TGT_MENU_ITEM, "Pozycja w submenu #2", 4,
	TGT_MENU_END,
    TGT_MENU_ITEM, "Pozycja poza submenu", 5,
    TGT_MENU_END };
  no i klasa sobie to sama przerabia na strukturki...
  
- PULLDOWN-MENU: jak CONTEXT-MENU z tym ze struktury najwyzszego rzedu
  opisuja sama belke menu... podaje sie tez pozycje, x,y i wymiary xs,ys
  gdzie ma sie pojawic belka po ustawieniu TTGT_CONTEXTMENU_OPEN
  (bo w koncu menu moze byc podklasa desktopu ale moze byc tez podklasa
   windowa)
 
-     Nazwa: [--*--------] 3

  SLIDER (suwak) : -mozliwosc ustawiania i pobierania poczatku i konca zakresu,
  oraz aktualnej pozycji, - tagi TTGT_SLIDER_POSCHAR, do ustawienia znaku
  ktory powyzej zostal podany jako '*' oraz TTGT_SLIDER_VCHAR, do 
  ustawienia tego co tutaj przedstawione jest jako '-', - przesuniecie_znaku
  _*_w_stosunku_do_poczatku_obiektu= (max_range-min_range) * current / xs 
  czyli proporcjonalnie, - mozliwosc ustawienia TTGT_SLIDER_SHOWCURRENT
  pokazujacego obok aktualna pozycje (ilosc zarezerwowanych pol xx do "%-xxd"
  w printf() mozna policzyc biorac liczbe cyfr w min-ie (bo jak min
  bedzie mial -10 a max 0 to min bedzie zajmowal wiecej) lub maxie)
  
  inne propozycje suwakow:
  TGTT_SLIDER_TYPE ?
  
  ^   [---V----] 45%
  :
  :
  #   <:::::#####:::>
  #
  :
  v
  
  
-   [========------------]  43 %

  PROGRESS BAR: -tutaj rowniez mozliwe ustawienie znakow renderujacych obiekt,
  mozliwosc ustawienia minimum i maksimum oraz aktualnej pozycji w przycisku,
  - tag TTGT_PROGRESS_SHOWCURRENT powodujacy przy true pokazywanie procentowego
  postepu obok ...
  
     TGTT_PROGRESS_TYPE
  
    [#######........] 18
    >>>>>>>>>>>       61%
    

-  
    +-----------------+-+
    | Pozycja 1       |*|
    | Pozycja 2       |||           (uproszczenie! praktyka:ramki semigraficzne)
    | Pozycja 3       |||
    +-----------------+-+

  LISTVIEW: -lista wyboru, -pasek z boku (o ile wlaczony przez TTGT_LISTVIEW_
  _SHOWCURRENT) pokazuje proporcjonalnie jak sie ma numer aktywnego elementu
  do lacznej ilosci elementow, -dane przechowywane jako void *, podawane przy
  TTGT_LISTVIEW_ITEMS, na dowolny uzytek callbacka TTGT_LISTVIEW_DATAFUNCTION,
  cos a'la callback(_to_co_bylo_podane_jako_items_,int zadanie,int arg,void *zmienna)
  gdzie zadanie to jedno z TGT_LISTREQUEST_GETITEM, ustawiajacy zmienna
  na char * wskazujacy na opis pozycji arg (od zera liczac) wygenerowanego z uzyciem
  danej w pierwszym argumencie lub TGT_LISTREQUEST_GETITEMSCOUNT, ustawiajacy
  zmienna na int bedacy iloscia pozycji , - jesli callback nie zostal podany
  to ustawiany jest domyslny, ktory jako to co zostalo podane jako dane przyjmuje
  za char** czyli tablice na ciagi bedace pozycjami zakonczona NULL,
  - mozliwosc ustawienia /odczytania TTGT_LISTVIEW_SELECTED, TTGT_LISTVIEW_TOP
  (pierwsza na ekranie, wszak ilosc pozycji moze byc wieksza niz wielkosc
   w pionie) i odczytania TTGT_LISTVIEW_MAX, - reakcja na klawisze TTGT_KEY_
   _UP, TTGT_KEY_DOWN no i ew w przyszlosci TTGT_KEY_PGUP i TTGT_KEY_PGDN
   
-    +-| Nazwa |--------+
     |                  |  uproszczenie.. praktyka: semigrafika
     |                  |
     +------------------+ 
  
  FRAME: Ramka wygladajaca dokladnie tak jak ramka okna lecz bedaca jedynie
  statycznym, nieaktywowalnym obiektem.. druga zmiana: podczas refreshu
  nie czysci srodka siebie... tagi: raczej brak
  
                   v----- ??? (ew. gdybysmy kiedys wymyslili myszke.. ;])
  +-| Nazwa |------#-+
  |                  |
  +------------------+

-         _____  
    /-\    |   |  |
    \_/     \ /   |
            O    . 

   ASCIIART: Ikonka... tag TTGT_ASCIIART_ARRAY wskazujacy na char **
   opisujacy kolejne linijki ikonki (char ** zamiast char * jednym ciagiem,
   po to zeby mozna bylo uzywac ANSI)
   
W dalszej kolejnosci:

- CHOICEREQUESTER: wymaga wkompilowanych queues, nie renderuje sie ,
  jest niewidoczny, dopoki nie zostanie 
  ustawiony odpowiedni tag (tak jak w CONTEXTMENU), z racji kontekstu
  uzywania mozna zrobic do tego odpowiedni frontend (w samym pliku klasy),
  funkcje tworzaca, linkujaca, wlaczajaca (settag) , czekajaca, odlinkowywujaca
  i niszczaca obiekt tej klasy 
  - tagi: TTGT_CHOICE_TITLE, TTGT_CHOICE_TEXT, TTGT_CHOICE_BUTTONS ( w formie np
  "OK|Cancel"), TTGT_CHOICE_MSGQUEUE (podaje queue na ktory ma przyjsc informacja
  o wybranym przycisku), TGTT_CHOICE_QUEUECODE (podaje kod queue,data zostaje
  ustawione na wybrany przycisk) - nie pozwala userowi na wyjscie z siebie
  przed wybraniem przycisku

analogicznie: STRINGREQUESTER i FILEREQUESTER


- STATUSBAR: po prostu pozioma belka podzielona na pola (uzyc LABEL'i ?)
  ktore mozna ustawiac odpowiednimi wywolaniami.
  - tagi: TGTT_STATUS_SET / GET (jak wybierac ktore pole ustawiamy?)
   TGTT_STATUS_FG / BG

  | TGTApp v.0.1a                 | Online | .o.ox |


i teraz mala bombka (a moze wielka BOMBA?)
[wiesz co to jest jpig albo aalib?]

- ASCIIPIC: prostokatne pole bez ramek, z ew. suwakami do przewijania w ktorym
  wyswietlany jest obrazek wczytany przy pomocy imlib'a (zeby sie nie bawic samemu)
  zredukowany do 16 kolorow (ew. ilus odcieni 16tu podstawowych kolorow)
  i zamieniony na serie 'X' w odpowiednim kolorze, badz tak jak robi aalib, czyli
  symulujac jasnosc punktu dobierajac odpowiednio wypelniony znak ASCII
  - moze to byc nawet wrapper na imlib + aalib
  mozna by nawet tapete desktopu w ten sposob robic.. ;]

